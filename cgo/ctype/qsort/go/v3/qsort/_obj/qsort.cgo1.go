// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/zhi/Program/GoProgram/src/github.com/feiquan123/algorithm/cgo/ctype/qsort/go/v3/qsort/qsort.go:1:1
package qsort

/*
#include <stdlib.h>

typedef int (*qsort_cmp_func_t)(const void* a,const void*b);
extern int _cgo_qsort_compare(void* a,void* b);
*/
import _ "unsafe"
import (
	"fmt"
	"reflect"
	"sync"
	"unsafe"
)

var go_qsort_compare_info struct {
	base     unsafe.Pointer      // 切片的首个元素地址
	elemnum  int                 // 元素个数
	elemsize int                 // 元素大小
	less     func(a, b int) bool // 比较函数
	sync.Mutex
}

//export _cgo_qsort_compare
func _cgo_qsort_compare(a, b unsafe.Pointer)  /*line :26:46*/_Ctype_int /*line :26:51*/ {
	var (
		// array memory is locked
		base     = uintptr(go_qsort_compare_info.base)
		elemsize = uintptr(go_qsort_compare_info.elemsize)
	)

	i := int((uintptr(a) - base) / elemsize)
	j := int((uintptr(b) - base) / elemsize)

	switch {
	case go_qsort_compare_info.less(i, j): // v[i] < v[j]
		return -1
	case go_qsort_compare_info.less(j, i): // v[i] > v[j]
		return 1
	default:
		return 0
	}
}

func Slice(slice interface{}, less func(a, b int) bool) {
	sv := reflect.ValueOf(slice)
	if sv.Kind() != reflect.Slice {
		panic(fmt.Sprintf("qsort called with non-slice value of type %T", slice))
	}
	if sv.Len() == 0 {
		return
	}

	go_qsort_compare_info.Lock()
	defer go_qsort_compare_info.Unlock()

	// 释放全局变量
	defer func() {
		go_qsort_compare_info.base = nil
		go_qsort_compare_info.elemnum = 0
		go_qsort_compare_info.elemsize = 0
		go_qsort_compare_info.less = nil
	}()

	go_qsort_compare_info.base = unsafe.Pointer(sv.Index(0).Addr().Pointer())
	go_qsort_compare_info.elemnum = sv.Len()
	go_qsort_compare_info.elemsize = int(sv.Type().Elem().Size())
	go_qsort_compare_info.less = less

	func() { _cgo0 := /*line :72:3*/go_qsort_compare_info.base; var _cgo1 _Ctype_size_t = _Ctype_size_t(go_qsort_compare_info.elemnum); var _cgo2 _Ctype_size_t = _Ctype_size_t(go_qsort_compare_info.elemsize); var _cgo3 *[0]byte = _Ctype_qsort_cmp_func_t(_Cgo_ptr(_Cfpvar_fp__cgo_qsort_compare)); _cgoCheckPointer(_cgo0, nil); _Cfunc_qsort(_cgo0, _cgo1, _cgo2, _cgo3); }()
}
